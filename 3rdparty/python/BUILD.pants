python_requirements(
    name="3rdparty",
    module_mapping={
        # fixes annoying issue with pants not inferring the actual lib
        "boto3": [
            "boto3",
            "botocore",
        ],
    },
    overrides={
        "pex": {"dependencies": [":3rdparty#setuptools"]},
        "ray": {"dependencies": [":3rdparty#setuptools"]},
        "sqlalchemy": {"dependencies": [":3rdparty#psycopg2-binary"]},
    },
    source="pyproject.toml",
    type_stubs_module_mapping={
        "boto3-stubs": [
            "mypy_boto3_s3",
            "mypy_boto3_ec2",
            "mypy_boto3_rds",
        ],
    },
)

shell_sources(name="shell-scripts")

file(
    name="py311_linux_pex_platform_tags",
    source="python_3_11_9_linux_pex_platform_tags.json",
)

file(
    name="py311_macos_14_pex_platform_tags",
    source="python_3_11_9_macosx_14_pex_platform_tags.json",
)

files(
    name="lockfiles",
    sources=[
        "python_default.lock",
    ],
)


def convert_lockfile_to_pip_targets(
    platform, lockfile, tags, cuda=False, requirements=True, index_url=None
):
    basecmd = "convert_pants_lockfile_to_pip.sh"
    index_url = "" if index_url == None else index_url
    requirements = "--requirements"

    prefix = f"python_{platform}"
    if platform == "linux":
        if not cuda:
            index_url = "--extra-index-url https://download.pytorch.org/whl/cpu"
        if cuda:
            prefix = prefix + "_cuda"
    if not requirements:
        requirements = "-no-requirements"

    output_path = "."

    cmd = " ".join(
        ["bash", basecmd, index_url, requirements, lockfile, tags, output_path, prefix],
    )

    return run_shell_command(
        name="gen_requirements" + "_" + prefix,
        command=cmd,
        execution_dependencies=[
            ":shell-scripts",
            ":lockfiles",
            ":py311_linux_pex_platform_tags"
            if platform == "linux"
            else ":py311_macos_14_pex_platform_tags",
        ],
        workdir=".",
    )


convert_lockfile_to_pip_targets(
    "linux",
    "python_default",
    "python_3_11_9_linux_pex_platform_tags.json",
    cuda=True,
    requirements=True,
)


# the following is how to generate the platform tag json files.
docker_image(
    name="gen_ubuntu_platform_tags",
    build_platform=["linux/amd64"],
    image_tags=[
        "dev",
    ],
    source="Dockerfile.ubuntu_plat_tags",
)
