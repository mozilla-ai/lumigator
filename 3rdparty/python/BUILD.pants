## specifics for torch as pants doesn't like the multiple indexes and we can't spec them there.
# torch requires you to use `extra-index-url` or `index-url` style installation via pip to swap between cpu and CUDA, bc
# they don't handle it elsewhere.
# Pants is fine with the extra indexes, but can't sort out which ones map to which lockfile / resolve automatically - they are set globally and
# passed to the pex tool for lockfile gen. This is sort of annoying with torch (and tensorflow) specifically, as there are three common os platform/cuda
# variants to deal with. there's some discussion in the Pants project about changing this to allow per-resolve settings, but this is still annoying.

# the build file here uses pants to explicitly set the overrides for the torch dep defined in pyproject.toml
# with explicit URL download paths.

## this should stay very stable; note that requirements can be used with a direct URL for testing or if we assume that's stable forever
## to update torch versions, make sure to go to the actual pytorch repo and find the link to the wheel you want, with sha.

TORCH_VERSION = "2.4.0"
CUDA_VERSION = "cu118"
TORCH_CUDA_WHEEL_URL = "https://download.pytorch.org/whl/cu118/torch-2.4.0%2Bcu118-cp311-cp311-linux_x86_64.whl#sha256=6acd608416b12211e21dfe5b92ffb1c82126ee8d037dd119f45d8b28ed80a0d2"
TORCH_LINUX_CPU_WHEEL_URL = "https://download.pytorch.org/whl/cpu/torch-2.4.0%2Bcpu-cp311-cp311-linux_x86_64.whl#sha256=14a7a8b595347dddca594f9e448b93ce68ce4f871acbd32cf04bda7c03664c0c"

python_requirement(
    name="torch_manual",
    modules=["_dummy_torch"],
    **parametrize(
        "linux_cuda",
        requirements=[f"torch @ {TORCH_CUDA_WHEEL_URL}"],
        resolve="linux_cuda",
    ),
    **parametrize(
        "linux_cpu",
        requirements=[f"torch @ {TORCH_LINUX_CPU_WHEEL_URL}"],
        resolve="linux_cpu",
    ),
    **parametrize(
        "darwin",
        requirements=[
            f"torch=={TORCH_VERSION},!={TORCH_VERSION}+cpu,!={TORCH_VERSION}+{CUDA_VERSION}",
        ],
        resolve="darwin",
    ),
)

python_requirements(
    name="3rdparty",
    module_mapping={
        # fixes annoying issue with pants not inferring the actual lib
        "boto3": [
            "boto3",
            "botocore",
        ],
    },
    overrides={
        "pex": {"dependencies": [":3rdparty#setuptools"]},
        "ray": {"dependencies": [":3rdparty#setuptools"]},
        "sqlalchemy": {"dependencies": [":3rdparty#psycopg2-binary"]},
        "torch": {"dependencies": [":torch_manual"]},  # explicit override to use what we have above
    },
    source="pyproject.toml",
    type_stubs_module_mapping={
        "boto3-stubs": [
            "mypy_boto3_s3",
            "mypy_boto3_ec2",
            "mypy_boto3_rds",
        ],
    },
    **parametrize(
        "linux_cuda",
        resolve="linux_cuda",
    ),
    **parametrize(
        "linux_cpu",
        resolve="linux_cpu",
    ),
    **parametrize(
        "darwin",
        resolve="darwin",
    ),
)

shell_sources(name="shell-scripts")

file(
    name="py311_linux_pex_platform_tags",
    source="python_3_11_9_linux_pex_platform_tags.json",
)

file(
    name="py311_macos_14_pex_platform_tags",
    source="python_3_11_9_macosx_14_pex_platform_tags.json",
)

files(
    name="lockfiles",
    sources=[
        "darwin.lock",
        "linux_cpu.lock",
        "linux_cuda.lock",
    ],
)


def convert_lockfile_to_pip_targets(
    platform, lockfile, tags, cuda=False, requirements=True, index_url=None
):
    basecmd = "convert_pants_lockfile_to_pip.sh"
    index_url = "" if index_url == None else index_url
    requirements = "--requirements"

    prefix = f"python_{platform}"
    if platform == "linux":
        if not cuda:
            index_url = "--extra-index-url https://download.pytorch.org/whl/cpu"
        if cuda:
            prefix = prefix + "_cuda"
    if not requirements:
        requirements = "-no-requirements"

    output_path = "."

    cmd = " ".join(
        ["bash", basecmd, index_url, requirements, lockfile, tags, output_path, prefix],
    )

    return run_shell_command(
        name="gen_requirements" + "_" + prefix,
        command=cmd,
        execution_dependencies=[
            ":shell-scripts",
            ":lockfiles",
            ":py311_linux_pex_platform_tags"
            if platform == "linux"
            else ":py311_macos_14_pex_platform_tags",
        ],
        workdir=".",
    )


convert_lockfile_to_pip_targets(
    "darwin",
    "darwin.lock",
    "python_3_11_9_macosx_14_pex_platform_tags.json",
    cuda=False,
    requirements=True,
)

convert_lockfile_to_pip_targets(
    "linux",
    "linux_cuda.lock",
    "python_3_11_9_linux_pex_platform_tags.json",
    cuda=True,
    requirements=True,
)

convert_lockfile_to_pip_targets(
    "linux",
    "linux_cpu.lock",
    "python_3_11_9_linux_pex_platform_tags.json",
    cuda=False,
    requirements=True,
)

# the following is how to generate the platform tag json files.
docker_image(
    name="gen_ubuntu_platform_tags",
    build_platform=["linux/amd64"],
    image_tags=[
        "dev",
    ],
    source="Dockerfile.ubuntu_plat_tags",
)
