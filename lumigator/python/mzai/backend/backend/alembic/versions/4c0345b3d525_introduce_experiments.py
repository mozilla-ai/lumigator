"""Introduce experiments

Revision ID: 4c0345b3d525
Revises: e9679cbc3c36
Create Date: 2025-01-09 12:27:09.367193

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4c0345b3d525"  # pragma: allowlist secret
down_revision: str | None = "e9679cbc3c36"  # pragma: allowlist secret
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "experiments",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("CREATED", "PENDING", "RUNNING", "FAILED", "SUCCEEDED", name="jobstatus"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    # SQLite does not support altering tables. To work around this, we need to enable the generation
    # of batch mode operations. This means that Alembic will create a new table with the constraint,
    # copy the existing data over, and remove the old table.
    # This goes hand in hand with the `render_as_batch=True` option in the `run_migrations_offline`
    # function in `env.py`.
    # See more here: https://alembic.sqlalchemy.org/en/latest/batch.html
    with op.batch_alter_table("jobs") as batch_op:
        batch_op.add_column(sa.Column("experiment_id", sa.Uuid(), nullable=True))
        # Always add a name to the constraint, since SQLite, unlike any other database, allows
        # constraints to exist in the database that have no identifying name.
        # This can cause issues when trying to drop the constraint later on.
        # See more here: https://alembic.sqlalchemy.org/en/latest/batch.html#dropping-unnamed-or-named-foreign-key-constraints
        batch_op.create_foreign_key(
            "fk_jobs_experiments_id", "experiments", ["experiment_id"], ["id"]
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("jobs") as batch_op:
        batch_op.drop_constraint("fk_jobs_experiments_id", type_="foreignkey")
        batch_op.drop_column("experiment_id")
    op.drop_table("experiments")
    # ### end Alembic commands ###
