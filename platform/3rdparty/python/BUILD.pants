python_requirements(
    name="3rdparty",
    module_mapping={
        # fixes annoying issue with pants not inferring the actual lib
        "mypy-boto3-s3": ["mypy_boto3_s3"],
    },
    overrides={
        "pex": {"dependencies": [":3rdparty#setuptools"]},
        "ray": {"dependencies": [":3rdparty#setuptools"]},
        "sqlalchemy": {"dependencies": [":3rdparty#psycopg2-binary"]},
    },
    resolve=parametrize("python_darwin", "python_linux", "python_linux_cuda"),
    source="pyproject.toml",
)

TORCH_VERSION = "2.3.1"

CUDA_VERSION = "cu118"

TORCH_DARWIN = (
    "torch==" + TORCH_VERSION + ",!=" + TORCH_VERSION + "+cpu" + ",!=" + TORCH_VERSION + "+cu118"
)

python_requirement(
    name="torch_linux_cuda",
    requirements=[
        "torch==" + TORCH_VERSION + "+" + CUDA_VERSION + "; sys_platform == 'linux'",
    ],
    resolve="python_linux_cuda",
)

# specific for fucking torch CPU as pants doesn't like the multiple indexes and we can't spec them there.
# downloads the very specific package set for CPU only.
python_requirement(
    name="torch_linux_cpu",
    requirements=[
        "torch@https://download.pytorch.org/whl/cpu/torch-2.3.1%2Bcpu-cp311-cp311-linux_x86_64.whl#sha256=a272defe305dbd944aa28a91cc3db0f0149495b3ebec2e39723a7224fa05dc57 ; sys_platform == 'linux'",
    ],
    resolve="python_linux",
)

python_requirement(
    name="torch_darwin",
    requirements=[TORCH_DARWIN + "; sys_platform == 'darwin'"],
    resolve="python_darwin",
)

shell_sources(name="shell-scripts")

file(
    name="py311_linux_pex_platform_tags",
    source="python_3_11_9_linux_pex_platform_tags.json",
)

file(
    name="py311_macos_14_pex_platform_tags",
    source="python_3_11_9_macosx_14_pex_platform_tags.json",
)

files(
    name="lockfiles",
    sources=[
        "python_darwin.lock",
        "python_linux.lock",
        "python_linux_cuda.lock",
    ],
)


def convert_lockfile_to_pip_targets(
    platform, lockfile, tags, cuda=False, requirements=True, index_url=None
):
    basecmd = "convert_pants_lockfile_to_pip.sh"
    index_url = "" if index_url == None else index_url
    requirements = "--requirements"

    prefix = "python_{}".format(platform)
    if platform == "linux":
        if not cuda:
            index_url = "--extra-index-url https://download.pytorch.org/whl/cpu"
        if cuda:
            prefix = prefix + "_cuda"
    if not requirements:
        requirements = "-no-requirements"

    output_path = "."

    cmd = " ".join(["bash", basecmd, index_url, requirements, lockfile, tags, output_path, prefix])

    return run_shell_command(
        name="gen_requirements" + "_" + prefix,
        command=cmd,
        execution_dependencies=[
            ":shell-scripts",
            ":lockfiles",
            ":py311_linux_pex_platform_tags"
            if platform == "linux"
            else ":py311_macos_14_pex_platform_tags",
        ],
        workdir=".",
    )


convert_lockfile_to_pip_targets(
    "darwin",
    "python_darwin.lock",
    "python_3_11_9_macosx_14_pex_platform_tags.json",
    cuda=False,
    requirements=True,
)

convert_lockfile_to_pip_targets(
    "linux",
    "python_linux_cuda.lock",
    "python_3_11_9_linux_pex_platform_tags.json",
    cuda=True,
    requirements=True,
)

convert_lockfile_to_pip_targets(
    "linux",
    "python_linux.lock",
    "python_3_11_9_linux_pex_platform_tags.json",
    cuda=False,
    requirements=True,
)

# the following is how to generate the platform tag json files.
docker_image(
    name="gen_ubuntu_platform_tags",
    build_platform=["linux/amd64"],
    image_tags=[
        "dev",
    ],
    instructions=[
        "FROM mzdotai/golden:base_latest",
        'CMD ["pex3", "interpreter", "inspect", "--markers", "--tags", "--interpreter-constraint", "CPython==3.11.9"]',
    ],
    source="Dockerfile.ubuntu_plat_tags",
)
